import { ArrowCircleRightIcon } from "@heroicons/react/outline";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import DashboardHeader from "../components/dashboard/DashboardHeader";
import Table from "../components/dashboard/Table/Table";
import Layout from "../components/layout/Layout";
import LoadingSpinner from "../components/root/LoadingSpinner";
import { useAuth } from "../context/auth-context";
import { useStore } from "../context/store-context";

var currencies = require("country-data").currencies;

export default function Orders() {
  const { user } = useAuth();
  const { subdomain } = useStore();
  const [loading, setLoading] = useState(true);
  const [bookings, setBookings] = useState([]);
  console.log(currencies);
  useEffect(() => {
    fetch("/api/get-bookings", {
      method: "POST",
      body: JSON.stringify({ subdomain, uid: user.uid }),
    })
      .then((res) => {
        if (res.ok) {
          return res.json();
        }
        throw new Error("Error fetching stores");
      })
      .then((res) => {
        setLoading(false);
        setBookings(res);
      })
      .catch((err) => {
        alert(err);
        setLoading(false);
      });
  }, []);

  const tableData = bookings.map(
    ({
      paymentComplete,
      cancelled,
      id,
      currency,
      localAmount,
      date: {_seconds},
      ...booking
    }) => ({
      actualDate: new Date(_seconds*1000).toLocaleDateString(),
      localAmount:
        currency && localAmount
          ? (currency ? currencies[currency].symbol : "") + localAmount
          : "-",
      status: (
        <div className="flex justify-between">
          <div>
            {paymentComplete ? (
              <div className="px-3 py-1 rounded-full bg-green-300 text-green-800 text-xs">
                Complete
              </div>
            ) : cancelled ? (
              <div className="px-3 py-1 rounded-full bg-red-300 text-red-800 text-xs">
                Cancelled
              </div>
            ) : (
              <div className="px-3 py-1 rounded-full bg-yellow-300 text-yellow-800 text-xs">
                Incomplete
              </div>
            )}
          </div>
          <div className="flex justify-end">
            <Link href={`/book/${id}`}>
              <button>
                <ArrowCircleRightIcon className="h-8 w-8" />
              </button>
            </Link>
          </div>
        </div>
      ),
      ...booking,
    })
  );

  const columns = [
    {accessor: "actualDate", value: "Date"},
    { accessor: "localAmount", value: "Amount" },
    { accessor: "status", value: "status" },
  ];

  console.log(bookings);
  return (
    <div>
      <Head>
        <title>My Orders</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="max-w-6xl mx-auto md:px-4 space-y-4">
          <h1 className="text-2xl">Orders</h1>
          <DashboardHeader noCta searchText="Search orders..." />
          {loading ? (
            <LoadingSpinner text="Finding your orders..." />
          ) : (
            <Table expandable={false} columns={columns} data={tableData} />
          )}
        </div>
      </Layout>
    </div>
  );
}
